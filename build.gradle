plugins {
    id 'groovy'
    id 'io.github.gradle-nexus.publish-plugin'
}

version = projectVersion

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://repo.grails.org/grails/core' }
}

ext['isSnapshot'] = projectVersion.endsWith('-SNAPSHOT')
ext['isReleaseVersion'] = !isSnapshot

if(isReleaseVersion) {
    nexusPublishing {
        String nexusUser = System.getenv('SONATYPE_USERNAME') ?: project.findProperty('sonatypeOssUsername') ?: ''
        String nexusPass = System.getenv('SONATYPE_PASSWORD') ?: project.findProperty('sonatypeOssPassword') ?: ''
        String nexusStagingProfileId = System.getenv('SONATYPE_STAGING_PROFILE_ID') ?: project.findProperty('sonatypeOssStagingProfileId') ?: ''
        repositories {
            sonatype {
                nexusUrl = uri 'https://s01.oss.sonatype.org/service/local/'
                username = nexusUser
                password = nexusPass
                stagingProfileId = nexusStagingProfileId
            }
        }
        transitionCheckOptions {
            maxRetries = 40
            delayBetween = java.time.Duration.ofSeconds 2
        }
    }
}

subprojects {

    version = rootProject.version

    repositories {
        mavenCentral()
        maven { url 'https://repo.grails.org/grails/core' }
    }

    tasks.withType(Test).configureEach {
        useJUnitPlatform()
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
}

//do not generate extra load on Nexus with new staging repository if signing fails
tasks.withType(io.github.gradlenexus.publishplugin.InitializeNexusStagingRepository).configureEach {
    shouldRunAfter tasks.withType(Sign)
}