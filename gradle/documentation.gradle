/*
    README
    ======
    This file is not used at the moment. Should Guide/API-docs generation be moved to its on project?
    (Like the grails/gorm-docs project for grails/grails-data-mapping)
*/

def DOCUMENTATION_GROUP = 'Documentation'

def commonGithubOrg = 'grails'
def commonGithubSlug = 'grails-common-build'
def commonBranch = 'master'
def docResourcesDir = "${buildDir}/resources/${commonGithubSlug}-${commonBranch}/src/main/resources"

tasks.register('remoteDocResources', Copy) {

    group = DOCUMENTATION_GROUP
    description = 'Downloads common documentation resources and unzips them to build folder'

    from zipTree("https://github.com/${commonGithubOrg}/${commonGithubSlug}/archive/${commonBranch}.zip")
    into docResourcesDir
}

tasks.register('localDocResources', Copy) {

    group = DOCUMENTATION_GROUP
    description = 'Copy local resources to build folder'

    from 'src/main/docs/resources'
    into docResourcesDir
    onlyIf { project.file('src/main/docs/resources').exists() }
}

configurations {
    documentation
}

dependencies {
    if (configurations.find { it.name == 'documentation' }) {
        documentation libs.picocli
        documentation libs.jansi
        documentation libs.jline2
        documentation libs.javaparser.core
        documentation libs.groovy
        documentation libs.groovy.ant
        documentation libs.groovy.cli.picocli
    }
}

//groovydoc.classpath += configurations.documentation

tasks.withType(Groovydoc).configureEach {

    group = DOCUMENTATION_GROUP

    docTitle = "${project.title} - ${project.version}"
    destinationDir = project.file('build/docs/api')

    // Add the sources of all subprojects (except from the examples directory)
    def files = []
    rootProject.subprojects
        .findAll { it.projectDir.parentFile.name != 'examples' && it.file('src/main/groovy').exists() }
        .each { sp -> source = sp.files('src/main/groovy') }

    classpath += configurations.documentation
}

tasks.register('copyHtmlIndex', Copy) {

    group = DOCUMENTATION_GROUP
    description = 'Copy index.html to build folder'

    from "$buildDir/docs/guide/single.html"
    into "$buildDir/docs/guide/"
    rename 'single.html', 'index.html'
    //overwrite true

/*
    dependsOn tasks.named('prepareDocResources')
    source file(project.buildDir, 'docs/guide/single.html')
    destinationDirectory file(project.buildDir, 'docs/guide/')
    include 'index.html'
    rename 'index.html', 'single.html'
*/
}

tasks.register('guide', grails.doc.gradle.PublishGuide) {

    group = DOCUMENTATION_GROUP
    description = 'Generate Guide'

    targetDir = project.file("${buildDir}/docs")
    sourceRepo = "https://github.com/${githubSlug}/edit/${githubBranch}/src/main/docs"
    sourceDir = new File(rootProject.projectDir, 'src/main/docs')
    propertiesFiles = [ new File(rootProject.projectDir, 'gradle.properties') ]
    asciidoc = true
    resourcesDir = project.file(docResourcesDir)
    properties = [
            'safe': 'UNSAFE',
            'version': project.version,
            'subtitle': project.projectDesc,
            'api': '../api',
            'sourceDir': rootProject.projectDir.absolutePath,
            'sourcedir': rootProject.projectDir.absolutePath,
            'javaee': 'https://docs.oracle.com/javaee/7/api/',
            'javase': 'https://docs.oracle.com/en/java/javase/11/docs/api/',
            'groovyapi': "https://docs.groovy-lang.org/${libs.versions.groovy}/html/gapi/",
            'grailsapi': "https://docs.grails.org/${libs.versions.grails}/api/",
            'gormapi': "https://gorm.grails.org/${libs.versions.gorm}/api/",
            'springapi': "https://docs.spring.io/spring/docs/${libs.versions.spring}/javadoc-api/"
    ]
    doLast {
        ant.move(file: "${project.buildDir}/docs/guide/single.html",
                 tofile: "${project.buildDir}/docs/guide/index.html", overwrite: true)
        new File(project.buildDir, 'docs/index.html').text = '<html><head><meta http-equiv="refresh" content="0; url=guide/index.html" /></head><body></body></html>'
    }
}

/*
tasks.register('docs') {

    group = DOCUMENTATION_GROUP
    from ['groovydoc', 'guide']
}
*/

def assembleTask = project.tasks.findByName("assemble")
if(assembleTask == null) {
    tasks.register('assemble', Zip) {

        from groovydoc
        from guide

        archiveBaseName = "${project.name}-${project.version}"
        destinationDirectory = new File(project.buildDir, 'distributions')
    }
}