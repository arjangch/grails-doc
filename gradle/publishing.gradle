ext.setProperty('signing.keyId', project.findProperty('signing.keyId') ?: System.getenv('SIGNING_KEY'))
ext.setProperty('signing.password', project.findProperty('signing.password') ?: System.getenv('SIGNING_PASSPHRASE'))

def isGrailsPlugin = project.group == 'org.grails.plugins'
def isCoreModule = project.name.endsWith('-core')

def pomInfo = {
    delegate.name project.title
    delegate.description project.projectDesc
    delegate.url projectUrl

    delegate.licenses {
        delegate.license {
            delegate.name 'Apache-2.0'
            delegate.url 'https://www.apache.org/licenses/LICENSE-2.0.txt'
            delegate.distribution 'repo'
        }
    }

    delegate.scm {
        delegate.url "scm:git@github.com:${githubSlug}.git"
        delegate.connection "scm:git@github.com:${githubSlug}.git"
        delegate.developerConnection "scm:git@github.com:${githubSlug}.git"
    }

    if (developers) {
        delegate.developers {
            for (dev in developers.split(',')) {
                delegate.developer {
                    delegate.id dev.toLowerCase().replace(' ', '')
                    delegate.name dev.strip()
                }
            }
        }
    }
}

def javaComponent = components.named('java')
project.extensions.configure(PublishingExtension) { PublishingExtension pe ->

    pe.publications.register('maven', MavenPublication) {

        if (isGrailsPlugin) artifactId = project.name - 'grails-plugin-'
        if (isCoreModule) artifactId = project.name - '-core'

        from javaComponent.get()

        versionMapping {
            usage('java-api') { fromResolutionOf('runtimeClasspath') }
            usage('java-runtime') { fromResolutionResult() }
        }

        pom.withXml {
            def pomNode = asNode()
            pomNode.children().last() + pomInfo

            // dependency management shouldn't be included
            try { pomNode.dependencyManagement.replaceNode({}) } catch (Throwable ignore) {}
        }
    }

    if (isSnapshot) {
        repositories {
            maven {
                credentials {
                    username = project.findProperty('artifactoryPublishUsername') ?: System.getenv("ARTIFACTORY_USERNAME")
                    password = project.findProperty('artifactoryPublishPassword') ?: System.getenv("ARTIFACTORY_PASSWORD")
                }
                url "https://repo.grails.org/grails/libs-snapshots-local"
            }
        }
    }


}

afterEvaluate {
    def mavenPublication = project.extensions.findByType(PublishingExtension).publications.named('maven')
    project.extensions.configure(SigningExtension) { SigningExtension se ->
        se.required = { isReleaseVersion }
        se.sign mavenPublication.get()
    }
}
tasks.withType(Sign).configureEach {
    onlyIf { isReleaseVersion }
}