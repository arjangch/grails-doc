ext['signing.keyId'] = project.findProperty("signing.keyId") ?: System.getenv('SIGNING_KEY')
ext['signing.secretKeyRingFile'] = project.findProperty("signing.secretKeyRingFile") ?: "${System.properties['user.home']}${File.separator}.gnupg${File.separator}secring.gpg"
ext['signing.password'] = project.findProperty("signing.password") ?: System.getenv('SIGNING_PASSPHRASE')

def isExample = project.projectDir.parentFile.name == 'examples'
def isGrailsPlugin = project.group == 'org.grails.plugins'
def isCoreModule = project.name.endsWith('-core')

def pomInfo = {
    delegate.name project.title
    delegate.description project.projectDesc
    delegate.url projectUrl

    delegate.licenses {
        delegate.license {
            delegate.name 'The Apache Software License, Version 2.0'
            delegate.url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            delegate.distribution 'repo'
        }
    }

    delegate.scm {
        delegate.url "scm:git@github.com:${githubSlug}.git"
        delegate.connection "scm:git@github.com:${githubSlug}.git"
        delegate.developerConnection "scm:git@github.com:${githubSlug}.git"
    }

    if (developers) {
        delegate.developers {
            for (dev in developers.split(',')) {
                delegate.developer {
                    delegate.id dev.toLowerCase().replace(' ', '')
                    delegate.name dev
                }
            }
        }
    }
}

if (!isExample) { // don't publish examples

    publishing {

        if (isSnapshot) {
            repositories {
                maven {
                    credentials {
                        username = System.getenv('ARTIFACTORY_USERNAME') ?: project.findProperty('artifactoryPublishUsername') ?: ''
                        password = System.getenv('ARTIFACTORY_PASSWORD') ?: project.findProperty('artifactoryPublishPassword') ?: ''
                    }
                    url = (project.group == 'org.grails.plugins') ?
                        uri('https://repo.grails.org/grails/plugins3-snapshots-local') :
                        uri('https://repo.grails.org/grails/libs-snapshots-local')

                }
            }
        }

        publications {

            maven(MavenPublication) {

                if (isGrailsPlugin) artifactId = project.name - 'grails-plugin-'
                if (isCoreModule) artifactId = project.name - '-core'

                from components.java

                versionMapping {
                    usage('java-api') { fromResolutionOf('runtimeClasspath') }
                    usage('java-runtime') { fromResolutionResult() }
                }

                pom.withXml {
                    def xml = asNode()
                    xml.children().last() + pomInfo
                    // dependency management shouldn't be included
                    def n = xml.get('dependencyManagement')
                    if (n) xml.remove(n)
                }
            }
        }
    }

    afterEvaluate {
        signing {
            required { isReleaseVersion }
            sign publishing.publications.maven
        }
    }

    tasks.withType(Sign).configureEach {
        onlyIf { isReleaseVersion }
    }
}